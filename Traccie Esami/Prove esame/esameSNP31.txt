Testo in italiano

[ ATTENZIONE: questo è un testo codificato in UTF-8 ]

Creare nella propria home su hplinux2.unisalento.it una directory denominata
proprioaccount.esameSNP31 (es.franco.esameSNP31) e svolgere l'esercizio in
tale directory o, in alternativa, creare una directory con lo stesso nome
nella propria home macOS, svolgere gli esercizi in tale directory e, alla fine
della prova, trasferirla nella propria home su hplinux2.unisalento.it.

La soluzione deve rispettare lo standard SUSv3 ed essere completa di makefile.
Anche nel caso in cui non sia possibile risolvere il problema in accordo con
lo standard, la soluzione deve comunque funzionare su Linux e macOS. Nella
directory si DEVE anche creare un file di nome "LEGGIMI.txt" che descriva
l'impostazione adottata per le soluzioni oltre ad eventuali commenti e/o
osservazioni. Si fa presente che il contenuto di tale file permette spesso una
migliore comprensione della logica seguita nello svolgimento e, di
conseguenza, la sua presenza va a tutto vantaggio dell'esaminando.

Alla fine usare nel proprio account Linux la linea di comando:

cd; tar cvfz $USER.esameSNP31.tgz $USER.esameSNP31

[ ATTENZIONE: dare il comando qui sopra indicato nello shell eseguito sulla
macchina Linux, DOPO che la cartella proprioaccount.esameSNP31 è stata
trasferita sulla propria home su hplinux2.unisalento.it e NON mentre è ancora
nella propria home su macOS (se in essa si è lavorato). Si raccomanda, per
qualsiasi dubbio sullo svolgimento e la consegna del compito, di fare
riferimento alla pagina web:  http://www.liis.it/mw/index.php/LiiS:Istruzioni ]


Esercizio

Implementare usando il linguaggio C il seguente sistema. 
Un server riceve richieste di servizio da parte di client via rete. Il server è in grado di ricevere le richieste e di trattarle in maniera concorrente, inviandole per l'elaborazione a delle sue thread. Le thread impiegano, per trattare la richiesta, un tempo casuale con distribuzione uniforme da 0 a 1 secondo  e la inseriscono in coda ad una lista che viene servita con disciplina FIFO e tempi di servizio casuali con distribuzione uniforme da 0 a 1 secondo. Il server invia al terminale informazioni sul suo funzionamento.

_____________________________________________________________________________
English text

[ BEWARE: this text is UTF-8 encoded ]

Please create  a directory named youraccount.esameSNP31 in your home on
hplinux2.unisalento.it (e.g. franco.esameSNP31) and solve the exercise in that
directory or, alternatively, create a directory with the same name in your
macOS home, and solve the exercise in that directory. Eventually, transfer it
to your home on hplinux2.unisalento.it.

The created programs must be SUSv3 compliant and a makefile must be provided.
If the solution and the compliance are not possible together, the solution
must anyway be working both on Linux and macOS. In the same directory, a file
named README.txt containing a description of the solution and, possibly,
comments/observations on the choices made to solve the problem, MUST be
placed. Keep in mind that the file may help the reader to understand the logic
you adopted and to better appreciate your work.

When finished, execute in your own Linux account the following command line:

cd; tar cvfz $USER.esameSNP31.tgz $USER.esameSNP31

[BEWARE: the command above shown must be issued in the shell running in the
Linux machine, AFTER the folder youraccount.esameSNP31 has been transferred to
your home on hplinux2.unisalento.it and NOT when it's still in your home on
macOS (if you wrote the program there). For any doubt about the way to carry
on the exercise and how to hand it in, please read the web page (still in
italian, sorry, soon to be translated in english):
http://www.liis.it/mw/index.php/LiiS:Istruzioni]

Exercise

Implement by the C language the following system.
A server receives requests from network clients. The server processes the requests concurrently, by sending them to threads. The thread operates with random service time (uniformely distributed between 0 and 1 sec), then the request is added to a list. The list is served with FIFO discipline and a random service time (uniformely distributed between 0 and 1 sec). The system sends to the terminal information about its operations.




