Testo in italiano

[ ATTENZIONE: questo è un testo codificato in UTF-8 ]

Creare nella propria home su hplinux2.unisalento.it una directory denominata
proprioaccount.esameSNP27 (es.franco.esameSNP27) e svolgere l'esercizio in
tale directory o, in alternativa, creare una directory con lo stesso nome
nella propria home macOS, svolgere gli esercizi in tale directory e, alla fine
della prova, trasferirla nella propria home su hplinux2.unisalento.it.

La soluzione deve rispettare lo standard SUSv3 ed essere completa di makefile.
Anche nel caso in cui non sia possibile risolvere il problema in accordo con
lo standard, la soluzione deve comunque funzionare su Linux e macOS. Nella
directory si DEVE anche creare un file di nome "LEGGIMI.txt" che descriva
l'impostazione adottata per le soluzioni oltre ad eventuali commenti e/o
osservazioni. Si fa presente che il contenuto di tale file permette spesso una
migliore comprensione della logica seguita nello svolgimento e, di
conseguenza, la sua presenza va a tutto vantaggio dell'esaminando.

Alla fine usare nel proprio account Linux la linea di comando:

cd; tar cvfz $USER.esameSNP27.tgz $USER.esameSNP27

[ ATTENZIONE: dare il comando qui sopra indicato nello shell eseguito sulla
macchina Linux, DOPO che la cartella proprioaccount.esameSNP27 è stata
trasferita sulla propria home su hplinux2.unisalento.it e NON mentre è ancora
nella propria home su macOS (se in essa si è lavorato). Si raccomanda, per
qualsiasi dubbio sullo svolgimento e la consegna del compito, di fare
riferimento alla pagina web:  http://www.liis.it/mw/index.php/LiiS:Istruzioni ]


Esercizio

Implementare il seguente sistema: un processo invia ad un altro dei pacchetti di lunghezza variabile e contenuto casuale che hanno sempre al loro inizio un intero indicante la lunghezza in byte del pacchetto.
L'altro processo li riceve con una thread che li mette in una coda con lunghezza massima limitata, dalla quale due altre thread li rimuovono continuamente facendo spazio ai nuovi arrivati. Si ricorda che le code di questo tipo possono essere implementate con un buffer circolare, gestito con disciplina FIFO.
_____________________________________________________________________________
English text

[ BEWARE: this text is UTF-8 encoded ]

Please create  a directory named youraccount.esameSNP27 in your home on
hplinux2.unisalento.it (e.g. franco.esameSNP27) and solve the exercise in that
directory or, alternatively, create a directory with the same name in your
macOS home, and solve the exercise in that directory. Eventually, transfer it
to your home on hplinux2.unisalento.it.

The created programs must be SUSv3 compliant and a makefile must be provided.
If the solution and the compliance are not possible together, the solution
must anyway be working both on Linux and macOS. In the same directory, a file
named README.txt containing a description of the solution and, possibly,
comments/observations on the choices made to solve the problem, MUST be
placed. Keep in mind that the file may help the reader to understand the logic
you adopted and to better appreciate your work.

When finished, execute in your own Linux account the following command line:

cd; tar cvfz $USER.esameSNP27.tgz $USER.esameSNP27

[BEWARE: the command above shown must be issued in the shell running in the
Linux machine, AFTER the folder youraccount.esameSNP27 has been transferred to
your home on hplinux2.unisalento.it and NOT when it's still in your home on
macOS (if you wrote the program there). For any doubt about the way to carry
on the exercise and how to hand it in, please read the web page (still in
italian, sorry, soon to be translated in english):
http://www.liis.it/mw/index.php/LiiS:Istruzioni]

Exercise

A system must be implemented as described in the following: a process sends to another process variable length packets beginning with an integer which indicates the packet's length.
The other process receives them by a dedicated thread which puts the packets in a fixed length queue. Two more threads removes orderly the packets from the queue making room for new arrivals. Note: this kind of queues may be implemented by a circular buffer managed with FIFO discipline. 






